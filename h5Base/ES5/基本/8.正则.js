
/*

  定义
  正则类型是 对象

  1、直接量定义  /正则表达式/修饰符
    var reg1 = /z/
  2、对象定义    new RegExp(字符串，修饰符)
		var reg2=new RegExp('z');
  
  常用的方法
    let str = 'ab12cds'

    1、/c/.test(str)           查看str是否有c 返回Boolean 
    2、str.serch(/\d/)         查找str是否有数字 返回索引值
    3、str.match(/\d/g)        查找满足条件的内容,返回一个数组
                            加g 全部查找 不加只会查找满足的第一个
      match 查找子项的时候 () 匹配到的在 返回的数组里第二个开始对应 
        [,...args] = 返回的数组  // 意思是把第一个子给过滤掉 第一个是查找到的值

    4、str.replace(/\d/g,'*')  第二个参数替换第一个参数找到的内容,若第二个是函数就是返回值
      str.replace(/\d/g,function($0,$1,$2){
        $0 要查找的内容，与replace的第一个参数是一样的
        $1 要匹配的内容对应的位子下标
        $2 源字符串
        console.log($0,$1,$2);
      })
  
  分组
    () 代表一个字符 => (\d) 就是一个数字  每个()都是一个字符
    [] 匹配中括号里的任意一个字符,只代表一个字符 
        [1-9]           区间的写法，标示从1到9之间的任意的一个字符
        [a-z]           a-z之间的任意一个小写字母
        [A-Z]           A-Z之间的任意一个大写字母 
        [a-zA-Z0-9]     匹配a-z,A-Z,0-9(匹配任何字母和数字)
        ^               排除掉某个字符(仅仅用在中括号内表达这个意思)
        [\u4e00-\u9fa5] 中文的区间,包含所有的汉字
    red|blue|green 标示red,blue,green 这三个单词中的任何一个(至少)

  量词
    所有的量词都需要放在{n,m}里面
    {n}     前一项重复n次
    {n,}    前一项至少重复n次，最多不限
    {n,m}   前一项至少重复n次,最多重复m次
    
    +      前一项至少重复1次，最多不限     等价{1,}
    ？     前一项至少重复0次，最多重复1次，也就是说前一项是可选的，等价于{0,1}
    *      前一项至少重复0次，最多不限，也就是说前一项是可选的，等价{0,}
    
    ^      它出现在中括号里代表排除的意思,在中括号的外面标示字符串开始的位子
    $      字符串结束的位子
    
    \1 \2问题
    var RegExp = /^(123)(456)\2\1$/;
 
    这个\1  \2......  都要和正则表达式集合()一起使用

    \1表示重复正则第一个圆括号内匹配到的内容
    \2表示重复正则第二个圆括号内匹配到的内容  
  
  */

str="这11里\s是\d一行文字\n这里是\'第\'二行123文字";

// console.log(/里/.test(str))
// console.log(str.search(/\d/g))
// console.log(str.match(/\d+/)) 
// console.log(str.replace(/\d/g,'*')) 

let s = str.replace(/\d/g,function($0,$1,$2){
  // $0 要查找的内容，与replace的第一个参数是一样的
  // $1 要匹配的内容对应的位子下标
  // $2 源字符串
  console.log('=======',$0,$1,$2);
  return '+'
})
console.log(s)


